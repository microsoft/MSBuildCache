resources:
  repositories:
  - repository: MicroBuildTemplate
    type: git
    name: 1ESPipelineTemplates/MicroBuildTemplate
    ref: refs/tags/release
parameters:
- name: NetworkIsolationMode
  displayName: 'Network Isolation Mode'
  type: string
  default: Disabled
  values:
  - Disabled
  - Audit
  - Enforce
variables:
- template: /.azuredevops/pipelines/templates/variables.yml@self
- name: SignType
  value: Real
- name: TeamName
  value: MSBuild
trigger:
  batch: true
  branches:
    include:
    - 'main'
    - 'refs/tags/*'
pr: none
extends:
  template: azure-pipelines/MicroBuild.1ES.Official.yml@MicroBuildTemplate
  parameters:
    sdl:
      sbom:
        enabled: false
    pool:
      name: VSEngSS-MicroBuild2022-1ES
      demands:
      - msbuild
      - visualstudio
      os: windows
    stages:
    - stage: ''
      displayName: 'Build'
      jobs:
      - job: OfficialBuild
        displayName: Official Build
        variables:
          VsInstallDir: $(Build.ArtifactStagingDirectory)/vs
        pool:
          name: VSEngSS-MicroBuild2022-1ES
        templateContext:
          mb:
            signing:
              enabled: true
              signType: 'real'
              zipSources: false
          outputs:
          - output: nuget
            displayName: 'Push NuGet Packages to nuget.org'
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
            packageParentPath: '$(Build.ArtifactStagingDirectory)'
            packagesToPush: '$(ArtifactsDirectory)/**/*.nupkg'
            nuGetFeedType: 'external'
            publishFeedCredentials: 'MSBuildCache-Push'
          - output: pipelineArtifact
            displayName: 'Publish Logs'
            condition: always()
            targetPath: $(LogDirectory)
            artifactName: 'logs'
          - output: pipelineArtifact
            displayName: 'Publish Artifacts'
            condition: always()
            targetPath: $(ArtifactsDirectory)
            artifactName: artifacts
        steps:
        - template: templates\network-isolation.yml
          parameters:
            NetworkIsolationMode: ${{ parameters.NetworkIsolationMode }}
        - task: PowerShell@2
          displayName: 'Update SignType, Build Number, and Add Build Tag for tagged commits'
          condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
          inputs:
            targetType: 'inline'
            script: |
              Write-Host "Updating SignType to 'Real'"
              Write-Host "##vso[task.setvariable variable=SignType;]Real"
              Write-Host ""
              $buildTag = [System.Text.RegularExpressions.Regex]::Match("$(Build.SourceBranchName)", "v.*")
              if($buildTag.Success -eq $true)
              {
                  Write-Host "Updating VSTS build number to ""$buildTag"""
                  Write-Host "##vso[build.updatebuildnumber]$buildTag"
                  Write-Host ""
                  Write-Host "Adding build tag ""$buildTag"""
                  Write-Host "##vso[build.addbuildtag]$buildTag"
              }
        - checkout: self
          fetchDepth: 0
        - task: UseDotNet@2
          displayName: 'Install .NET $(DotNetVersion)'
          inputs:
            version: '$(DotNetVersion)'
        - task: NuGetAuthenticate@1
          displayName: NuGet Authenticate
        - script: |
            dotnet build $(Build.SourcesDirectory)/MSBuildCache.sln --configuration $(BuildConfiguration) -BinaryLogger:$(LogDirectory)/msbuild.binlog
          displayName: Build
        - task: DotNetCoreCLI@2
          displayName: Run Unit Tests
          inputs:
            command: test
            projects: $(Build.SourcesDirectory)/MSBuildCache.sln
            arguments: -restore:false --no-build --configuration $(BuildConfiguration)